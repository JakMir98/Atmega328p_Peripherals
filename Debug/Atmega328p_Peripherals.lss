
Atmega328p_Peripherals.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000432  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800100  00800100  000004a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000238b  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6f  00000000  00000000  00002c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a32  00000000  00000000  000039d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b38  00000000  00000000  00005404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014e0  00000000  00000000  00005f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027ca  00000000  00000000  0000741c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  00009be6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_1>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_2>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_3>
  10:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_4>
  14:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_17>
  48:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_18>
  4c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_19>
  50:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_20>
  54:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include "tests/tests.h"


int main(void)
{
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main>

000000a8 <__vector_21>:
{
    adcInterruptFunction = 0;
}

ISR(ADC_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
    if(adcInterruptFunction != 0)
  ca:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ce:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d2:	30 97       	sbiw	r30, 0x00	; 0
  d4:	09 f0       	breq	.+2      	; 0xd8 <__vector_21+0x30>
        adcInterruptFunction();
  d6:	09 95       	icall
}
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	bf 91       	pop	r27
  de:	af 91       	pop	r26
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	7f 91       	pop	r23
  e6:	6f 91       	pop	r22
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_1>:
{
    pcint2Function = 0;
}

ISR(INT0_vect) 
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	if(int0Function != 0)
 11c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <int0Function>
 120:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <int0Function+0x1>
 124:	30 97       	sbiw	r30, 0x00	; 0
 126:	09 f0       	breq	.+2      	; 0x12a <__vector_1+0x30>
        int0Function();
 128:	09 95       	icall
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_2>:

ISR(INT1_vect) 
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	if(int1Function != 0)
 16e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <int1Function>
 172:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <int1Function+0x1>
 176:	30 97       	sbiw	r30, 0x00	; 0
 178:	09 f0       	breq	.+2      	; 0x17c <__vector_2+0x30>
        int1Function();
 17a:	09 95       	icall
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <__vector_3>:

ISR(PCINT0_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	if(pcint0Function != 0)
 1c0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pcint0Function>
 1c4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <pcint0Function+0x1>
 1c8:	30 97       	sbiw	r30, 0x00	; 0
 1ca:	09 f0       	breq	.+2      	; 0x1ce <__vector_3+0x30>
        pcint0Function();
 1cc:	09 95       	icall
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_4>:

ISR(PCINT1_vect)
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
	if(pcint1Function != 0)
 212:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <pcint1Function>
 216:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <pcint1Function+0x1>
 21a:	30 97       	sbiw	r30, 0x00	; 0
 21c:	09 f0       	breq	.+2      	; 0x220 <__vector_4+0x30>
        pcint1Function();
 21e:	09 95       	icall
}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__vector_5>:

ISR(PCINT2_vect)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
    if(pcint2Function != 0)
 264:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <pcint2Function>
 268:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <pcint2Function+0x1>
 26c:	30 97       	sbiw	r30, 0x00	; 0
 26e:	09 f0       	breq	.+2      	; 0x272 <__vector_5+0x30>
        pcint2Function();
 270:	09 95       	icall
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_24>:
	
	return 0;
}

ISR(TWI_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
    if (i2cInterruptFunction != 0)
 2b6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <i2cInterruptFunction>
 2ba:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <i2cInterruptFunction+0x1>
 2be:	30 97       	sbiw	r30, 0x00	; 0
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <__vector_24+0x30>
        i2cInterruptFunction();
 2c2:	09 95       	icall
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_17>:
	// Return Data Register
	return SPDR;
}

ISR(SPI_STC_vect)
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	4f 93       	push	r20
 2f6:	5f 93       	push	r21
 2f8:	6f 93       	push	r22
 2fa:	7f 93       	push	r23
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31
    if(spiInterruptFunction != 0)
 308:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <spiInterruptFunction>
 30c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <spiInterruptFunction+0x1>
 310:	30 97       	sbiw	r30, 0x00	; 0
 312:	09 f0       	breq	.+2      	; 0x316 <__vector_17+0x30>
        spiInterruptFunction();
 314:	09 95       	icall
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_18>:
   resh = (resh >> 1) & 0x01;
   return ((resh << 8) | resl);
}

ISR(USART_RX_vect)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
    if(usartRxInterruptFunction != 0)
 35a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <usartRxInterruptFunction>
 35e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <usartRxInterruptFunction+0x1>
 362:	30 97       	sbiw	r30, 0x00	; 0
 364:	09 f0       	breq	.+2      	; 0x368 <__vector_18+0x30>
        usartRxInterruptFunction();
 366:	09 95       	icall
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_20>:

ISR(USART_TX_vect)
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	2f 93       	push	r18
 396:	3f 93       	push	r19
 398:	4f 93       	push	r20
 39a:	5f 93       	push	r21
 39c:	6f 93       	push	r22
 39e:	7f 93       	push	r23
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
    if(usartTxInterruptFunction != 0)
 3ac:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <usartTxInterruptFunction>
 3b0:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <usartTxInterruptFunction+0x1>
 3b4:	30 97       	sbiw	r30, 0x00	; 0
 3b6:	09 f0       	breq	.+2      	; 0x3ba <__vector_20+0x30>
        usartTxInterruptFunction();
 3b8:	09 95       	icall
}
 3ba:	ff 91       	pop	r31
 3bc:	ef 91       	pop	r30
 3be:	bf 91       	pop	r27
 3c0:	af 91       	pop	r26
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	7f 91       	pop	r23
 3c8:	6f 91       	pop	r22
 3ca:	5f 91       	pop	r21
 3cc:	4f 91       	pop	r20
 3ce:	3f 91       	pop	r19
 3d0:	2f 91       	pop	r18
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <__vector_19>:

ISR(USART_UDRE_vect)
{
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	2f 93       	push	r18
 3e8:	3f 93       	push	r19
 3ea:	4f 93       	push	r20
 3ec:	5f 93       	push	r21
 3ee:	6f 93       	push	r22
 3f0:	7f 93       	push	r23
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	af 93       	push	r26
 3f8:	bf 93       	push	r27
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
    if(usartDataRegisterEmptyInterruptFunction != 0)
 3fe:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <usartDataRegisterEmptyInterruptFunction>
 402:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <usartDataRegisterEmptyInterruptFunction+0x1>
 406:	30 97       	sbiw	r30, 0x00	; 0
 408:	09 f0       	breq	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
        usartDataRegisterEmptyInterruptFunction();
 40a:	09 95       	icall
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
